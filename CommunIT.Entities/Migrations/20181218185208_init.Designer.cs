// <auto-generated />
using System;
using CommunIT.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CommunIT.Entities.Migrations
{
    [DbContext(typeof(CommunITContext))]
    [Migration("20181218185208_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CommunIT.Entities.BaseTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BaseTags");

                    b.HasData(
                        new { Id = 1, Name = "Career" },
                        new { Id = 2, Name = "Creativity" },
                        new { Id = 3, Name = "Culture" },
                        new { Id = 4, Name = "Debate" },
                        new { Id = 5, Name = "Health" },
                        new { Id = 6, Name = "Life style" },
                        new { Id = 7, Name = "Nature" },
                        new { Id = 8, Name = "Sports" },
                        new { Id = 9, Name = "Online life" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<int>("ThreadId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new { Id = 1, Content = "sure", Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), ThreadId = 1, UserId = "kols@itu.dk" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Communities");

                    b.HasData(
                        new { Id = 1, Description = "We love bunnies that play football", Name = "Bunny football lovers Com 1" },
                        new { Id = 2, Description = "Bunnies that play football is disgusting!", Name = "Bunny football haters" },
                        new { Id = 3, Description = "It's cold outside - so wear a jacket, goddammit!", Name = "Your mom's community" },
                        new { Id = 4, Description = "Close this shit..", Name = "This application is a Reddit rip off!" },
                        new { Id = 5, Description = "This is just a Reddit rip off, anyway", Name = "God, there is a lot of dumb communities" },
                        new { Id = 6, Description = "What an idiot..", Name = "Who makes all of these communities?" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.CommunityBaseTag", b =>
                {
                    b.Property<int>("CommunityId");

                    b.Property<int>("BaseTagId");

                    b.HasKey("CommunityId", "BaseTagId");

                    b.HasIndex("BaseTagId");

                    b.ToTable("CommunityBaseTags");

                    b.HasData(
                        new { CommunityId = 1, BaseTagId = 8 }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.CommunitySubTag", b =>
                {
                    b.Property<int>("CommunityId");

                    b.Property<int>("SubTagId");

                    b.HasKey("CommunityId", "SubTagId");

                    b.HasIndex("SubTagId");

                    b.ToTable("CommunitySubTags");

                    b.HasData(
                        new { CommunityId = 1, SubTagId = 43 }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.CommunityUser", b =>
                {
                    b.Property<int>("CommunityId");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("DateJoined");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsFavorite");

                    b.HasKey("CommunityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CommunityUsers");

                    b.HasData(
                        new { CommunityId = 1, UserId = "kols@itu.dk", DateJoined = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), IsAdmin = true, IsFavorite = false },
                        new { CommunityId = 1, UserId = "amle@itu.dk", DateJoined = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), IsAdmin = false, IsFavorite = false },
                        new { CommunityId = 1, UserId = "tosk@itu.dk", DateJoined = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), IsAdmin = false, IsFavorite = false }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommunityId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Events");

                    b.HasData(
                        new { Id = 1, CommunityId = 1, Date = new DateTime(2018, 12, 20, 0, 0, 0, 0, DateTimeKind.Local), Description = "Ever wanted your bunnny to play like Cristiano Ronaldo? Meet us in the forest on on the spcified date", Title = "Learn your bunny to do a scissor kick" },
                        new { Id = 2, CommunityId = 1, Date = new DateTime(2018, 12, 21, 0, 0, 0, 0, DateTimeKind.Local), Description = "Hungry?", Title = "Bunny slaughtering for beginners" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.EventUser", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<string>("UserId");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUsers");

                    b.HasData(
                        new { EventId = 1, UserId = "amle@itu.dk" },
                        new { EventId = 2, UserId = "kols@itu.dk" },
                        new { EventId = 1, UserId = "tosk@itu.dk" },
                        new { EventId = 2, UserId = "tosk@itu.dk" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommunityId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Forums");

                    b.HasData(
                        new { Id = 1, CommunityId = 1, Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), Description = "Do they all like carrots?", Name = "How to feed your bunny" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.SubTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SubTags");

                    b.HasData(
                        new { Id = 1, Name = "Job" },
                        new { Id = 2, Name = "Education" },
                        new { Id = 3, Name = "Payment" },
                        new { Id = 4, Name = "Applications" },
                        new { Id = 5, Name = "Union" },
                        new { Id = 6, Name = "Coaching" },
                        new { Id = 7, Name = "Crochet" },
                        new { Id = 8, Name = "Knitting" },
                        new { Id = 9, Name = "Sewing" },
                        new { Id = 10, Name = "Drawing" },
                        new { Id = 11, Name = "Painting" },
                        new { Id = 12, Name = "Art" },
                        new { Id = 13, Name = "Literature" },
                        new { Id = 14, Name = "Architecture" },
                        new { Id = 15, Name = "Culture activities" },
                        new { Id = 16, Name = "Literature" },
                        new { Id = 17, Name = "Politics" },
                        new { Id = 18, Name = "Philosophy" },
                        new { Id = 19, Name = "Science" },
                        new { Id = 20, Name = "Religion" },
                        new { Id = 21, Name = "Environment" },
                        new { Id = 22, Name = "Recipe" },
                        new { Id = 23, Name = "Medicin" },
                        new { Id = 24, Name = "Diseases" },
                        new { Id = 25, Name = "Fitness" },
                        new { Id = 26, Name = "Psychology" },
                        new { Id = 27, Name = "Diets" },
                        new { Id = 28, Name = "Mindfullness" },
                        new { Id = 29, Name = "Podcast" },
                        new { Id = 30, Name = "Interior design" },
                        new { Id = 31, Name = "Beauty" },
                        new { Id = 32, Name = "Treatments" },
                        new { Id = 33, Name = "Fashion" },
                        new { Id = 34, Name = "Gossip" },
                        new { Id = 35, Name = "Diets" },
                        new { Id = 36, Name = "Agriculture" },
                        new { Id = 37, Name = "Forest" },
                        new { Id = 38, Name = "Hiking" },
                        new { Id = 39, Name = "Animals" },
                        new { Id = 40, Name = "Climate" },
                        new { Id = 41, Name = "ecology" },
                        new { Id = 42, Name = "Championships" },
                        new { Id = 43, Name = "Hobby sports" },
                        new { Id = 44, Name = "Sport" },
                        new { Id = 45, Name = "Hooligans" },
                        new { Id = 46, Name = "Roligan" },
                        new { Id = 47, Name = "Equipment" },
                        new { Id = 48, Name = "Betting" },
                        new { Id = 49, Name = "Gaming" },
                        new { Id = 50, Name = "Programming" },
                        new { Id = 51, Name = "VR" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.Thread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<int>("ForumId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Threads");

                    b.HasData(
                        new { Id = 1, Content = "Was just wondering", Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), ForumId = 1, Title = "Can they drink bleach?", UserId = "kols@itu.dk" },
                        new { Id = 2, Content = "pl0x answer", Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), ForumId = 1, Title = "What do you feed?", UserId = "amle@itu.dk" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<DateTime>("Created");

                    b.Property<string>("DisplayName");

                    b.Property<string>("University");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new { Username = "kols@itu.dk", Bio = "I like cake and cookies", Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), DisplayName = "Longjohn69" },
                        new { Username = "amle@itu.dk", Bio = "Hello, World", Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), DisplayName = "amle" },
                        new { Username = "emfi@itu.dk", Bio = "lol wtf", Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), DisplayName = "emfi" },
                        new { Username = "tosk@itu.dk", Bio = "What the fuck is going on", Created = new DateTime(2018, 12, 18, 0, 0, 0, 0, DateTimeKind.Local), DisplayName = "tosk" }
                    );
                });

            modelBuilder.Entity("CommunIT.Entities.Comment", b =>
                {
                    b.HasOne("CommunIT.Entities.Thread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunIT.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CommunIT.Entities.CommunityBaseTag", b =>
                {
                    b.HasOne("CommunIT.Entities.BaseTag", "BaseTag")
                        .WithMany()
                        .HasForeignKey("BaseTagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunIT.Entities.Community", "Community")
                        .WithMany("CommunityBaseTags")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CommunIT.Entities.CommunitySubTag", b =>
                {
                    b.HasOne("CommunIT.Entities.Community", "Community")
                        .WithMany("CommunitySubTags")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunIT.Entities.SubTag", "SubTag")
                        .WithMany()
                        .HasForeignKey("SubTagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CommunIT.Entities.CommunityUser", b =>
                {
                    b.HasOne("CommunIT.Entities.Community", "Community")
                        .WithMany("CommunityUsers")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunIT.Entities.User", "User")
                        .WithMany("CommunityUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CommunIT.Entities.Event", b =>
                {
                    b.HasOne("CommunIT.Entities.Community", "Community")
                        .WithMany("Events")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CommunIT.Entities.EventUser", b =>
                {
                    b.HasOne("CommunIT.Entities.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunIT.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CommunIT.Entities.Forum", b =>
                {
                    b.HasOne("CommunIT.Entities.Community", "Community")
                        .WithMany("Forums")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CommunIT.Entities.Thread", b =>
                {
                    b.HasOne("CommunIT.Entities.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CommunIT.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
